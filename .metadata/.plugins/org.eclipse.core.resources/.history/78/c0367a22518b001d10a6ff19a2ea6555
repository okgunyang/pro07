package kr.go.molab.util;

import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;

import javax.imageio.ImageIO;

import org.springframework.util.StringUtils;

public class FileManager {
	/*
	public void fileUpload(String path, String fileIrum) {
		BufferedInputStream bi = null;
		FileOutputStream fo = null;
		
		final String DOWNLOAD_URL = "https://blog.kakaocdn.net/dn/bhK3bF/btqZ3fko0Nb/GXa1NlyVQzNhT4GYZDeoL1/uploadTestFile.txt?attach=1&knm=tfile.txt";
		final String UPLOAD_PATH = path;
		final int MAX_SIZE = 20 * 1024 * 1024; // 20MB
		
		try {
			File file = new File(UPLOAD_PATH);
			if(!file.exists()) { // 폴더가 존재하는지 확인
				file.mkdirs(); // 폴더 경로가 없을 경우 폴더 경로 생성
			}
			
			String fileName = fileIrum; 
			
			bi = new BufferedInputStream(new URL(DOWNLOAD_URL).openStream());
			fo = new FileOutputStream(UPLOAD_PATH + "/" + fileName); // 파일이 저장될 위치
			
			byte buffer[] = new byte[1024]; // 최대 1KB씩 저장
			int len;
			long fileSize = 0;
			
			while((len = bi.read(buffer, 0, buffer.length)) != -1) { // 파일을 읽으며 buffer에 최대 buffer길이만큼 저장
				fo.write(buffer, 0, len); // buffer의 0~len에 담긴 파일 내용을 저장
				fileSize = fileSize + len;
				
				if(fileSize > MAX_SIZE) { // 최대 범위를 초과할 경우 파일 업로드 종료
					break;
				}
			}
			
			fo.close();
			bi.close();
			
			if(fileSize <= MAX_SIZE) {
				System.out.println("파일 업로드 완료!");
				System.out.println("파일 크기: " + fileSize + "Byte");
			} else {
				new File(UPLOAD_PATH + "/" + fileName).delete();
				System.out.println("파일 최대 사이즈 초과로 파일 삭제 처리!");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	*/
	private String uploadCdn(URL imageURL, int maxWidth, long maxSize) throws IOException, UploadSizeLimitExceededException, CDNUploadException {
		// 리사이징...
		BufferedImage originalMainImage = ImageIO.read(imageURL);
		String fileType = Files.probeContentType(new File(imageURL.getFile()).toPath());	// mime type
		
		String fileExtension = "";
		if(StringUtils.equals("image/jpeg", fileType)) {
			fileExtension = "jpg";
		} else if(StringUtils.equals("image/png", fileType)) {
			fileExtension = "png";
		} else if(StringUtils.equals("image/gif", fileType)) {
			fileExtension = "gif";
		} else {
			// throw Exception
		}

		// Upload FileName generate
		
		int imageWidth = originalMainImage.getWidth();
		int imageHeight = originalMainImage.getHeight();
		
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		byte[] imageInByte;
		
		if(originalMainImage.getWidth() > maxWidth) {
			int type = originalMainImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalMainImage.getType();
			int resizeHeight = (maxWidth * imageHeight) / imageWidth;
			
			BufferedImage resizedMainImage = CommonUtil.resizeImage(originalMainImage, type,
					maxWidth, resizeHeight);
			
			ImageIO.write( resizedMainImage, fileExtension, baos );
		} else {
			ImageIO.write( originalMainImage, fileExtension, baos );
		}
		
		baos.flush();
		imageInByte = baos.toByteArray();
		baos.close();
		
		// 이미지 사이즈 체크
		long size = imageInByte.length;
		if(size > maxSize) {
			// throw Exception
		}
		
		// upload 후 업로드 된 이미지의 URL 리턴...
		return uploadedFullUrl;
	}
}
